{"version":3,"file":"getData.js","names":["_dropEmptyRows","_interopRequireDefault","require","_dropEmptyColumns","obj","__esModule","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","len","arr2","r","l","t","e","u","a","f","push","getData","sheet","options","dimensions","cells","_dimensions","leftTop","rightBottom","colsCount","column","rowsCount","row","data","j","_iterator","_step","cell","rowIndex","columnIndex","rowIndexMap","rowMap","dropEmptyRows","dropEmptyColumns","onlyTrimAtTheEnd","transformData"],"sources":["../../source/read/getData.js"],"sourcesContent":["import dropEmptyRows from './dropEmptyRows.js'\r\nimport dropEmptyColumns from './dropEmptyColumns.js'\r\n\r\nexport default function getData(sheet, options) {\r\n  const { dimensions, cells } = sheet\r\n\r\n  // If the sheet is empty.\r\n  if (cells.length === 0) {\r\n    return []\r\n  }\r\n\r\n  const [leftTop, rightBottom] = dimensions\r\n\r\n  // Don't discard empty rows or columns at the start.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/102\r\n  // const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  // const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  const colsCount = rightBottom.column\r\n  const rowsCount = rightBottom.row\r\n\r\n  // Initialize spreadsheet data structure.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n\r\n  // Fill in spreadsheet `data`.\r\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\r\n  //  maybe that's not correct, this piece code was initially copy-pasted\r\n  //  from some other library that used `XPath`)\r\n  for (const cell of cells) {\r\n    // Don't discard empty rows or columns at the start.\r\n    // https://github.com/catamphetamine/read-excel-file/issues/102\r\n    // const rowIndex = cell.row - leftTop.row\r\n    // const columnIndex = cell.column - leftTop.column\r\n    const rowIndex = cell.row - 1\r\n    const columnIndex = cell.column - 1\r\n    // Ignore the data in the cell if it's outside of the spreadsheet's \"dimensions\".\r\n    if (columnIndex < colsCount && rowIndex < rowsCount) {\r\n      data[rowIndex][columnIndex] = cell.value\r\n    }\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap: rowIndexMap } = options\r\n  if (rowIndexMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowIndexMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  // Drop empty columns or rows.\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowIndexMap }\r\n  )\r\n\r\n  // Optionally transform data before applying `schema`.\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowIndexMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  return data\r\n}"],"mappings":";;;;;;AAAA,IAAAA,cAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAoD,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,gCAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,oBAAAE,EAAA,UAAAA,EAAA,GAAAA,EAAA,CAAAG,IAAA,CAAAL,CAAA,GAAAM,IAAA,CAAAC,IAAA,CAAAL,EAAA,OAAAM,KAAA,CAAAC,OAAA,CAAAT,CAAA,MAAAE,EAAA,GAAAQ,2BAAA,CAAAV,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAW,MAAA,qBAAAT,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAU,CAAA,+BAAAA,CAAA,IAAAZ,CAAA,CAAAW,MAAA,WAAAE,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAY,CAAA,sBAAAG,SAAA;AAAA,SAAAC,eAAAC,GAAA,EAAAL,CAAA,WAAAM,eAAA,CAAAD,GAAA,KAAAE,qBAAA,CAAAF,GAAA,EAAAL,CAAA,KAAAF,2BAAA,CAAAO,GAAA,EAAAL,CAAA,KAAAQ,gBAAA;AAAA,SAAAA,iBAAA,cAAAL,SAAA;AAAA,SAAAL,4BAAAV,CAAA,EAAAqB,MAAA,SAAArB,CAAA,qBAAAA,CAAA,sBAAAsB,iBAAA,CAAAtB,CAAA,EAAAqB,MAAA,OAAAE,CAAA,GAAAC,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAArB,IAAA,CAAAL,CAAA,EAAA2B,KAAA,aAAAJ,CAAA,iBAAAvB,CAAA,CAAA4B,WAAA,EAAAL,CAAA,GAAAvB,CAAA,CAAA4B,WAAA,CAAAC,IAAA,MAAAN,CAAA,cAAAA,CAAA,mBAAAf,KAAA,CAAAsB,IAAA,CAAA9B,CAAA,OAAAuB,CAAA,+DAAAQ,IAAA,CAAAR,CAAA,UAAAD,iBAAA,CAAAtB,CAAA,EAAAqB,MAAA;AAAA,SAAAC,kBAAAL,GAAA,EAAAe,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAf,GAAA,CAAAN,MAAA,EAAAqB,GAAA,GAAAf,GAAA,CAAAN,MAAA,WAAAC,CAAA,MAAAqB,IAAA,OAAAzB,KAAA,CAAAwB,GAAA,GAAApB,CAAA,GAAAoB,GAAA,EAAApB,CAAA,IAAAqB,IAAA,CAAArB,CAAA,IAAAK,GAAA,CAAAL,CAAA,UAAAqB,IAAA;AAAA,SAAAd,sBAAAe,CAAA,EAAAC,CAAA,QAAAC,CAAA,WAAAF,CAAA,gCAAA/B,MAAA,IAAA+B,CAAA,CAAA/B,MAAA,CAAAC,QAAA,KAAA8B,CAAA,4BAAAE,CAAA,QAAAC,CAAA,EAAAd,CAAA,EAAAX,CAAA,EAAA0B,CAAA,EAAAC,CAAA,OAAAC,CAAA,OAAAxC,CAAA,iBAAAY,CAAA,IAAAwB,CAAA,GAAAA,CAAA,CAAA/B,IAAA,CAAA6B,CAAA,GAAA5B,IAAA,QAAA6B,CAAA,QAAAX,MAAA,CAAAY,CAAA,MAAAA,CAAA,UAAAI,CAAA,uBAAAA,CAAA,IAAAH,CAAA,GAAAzB,CAAA,CAAAP,IAAA,CAAA+B,CAAA,GAAAvB,IAAA,MAAA0B,CAAA,CAAAE,IAAA,CAAAJ,CAAA,CAAAvB,KAAA,GAAAyB,CAAA,CAAA5B,MAAA,KAAAwB,CAAA,GAAAK,CAAA,iBAAAN,CAAA,IAAAlC,CAAA,OAAAuB,CAAA,GAAAW,CAAA,yBAAAM,CAAA,YAAAJ,CAAA,eAAAE,CAAA,GAAAF,CAAA,cAAAZ,MAAA,CAAAc,CAAA,MAAAA,CAAA,2BAAAtC,CAAA,QAAAuB,CAAA,aAAAgB,CAAA;AAAA,SAAArB,gBAAAD,GAAA,QAAAT,KAAA,CAAAC,OAAA,CAAAQ,GAAA,UAAAA,GAAA;AAErC,SAASyB,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC9C,IAAQC,UAAU,GAAYF,KAAK,CAA3BE,UAAU;IAAEC,KAAK,GAAKH,KAAK,CAAfG,KAAK;;EAEzB;EACA,IAAIA,KAAK,CAACnC,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,EAAE;EACX;EAEA,IAAAoC,WAAA,GAAA/B,cAAA,CAA+B6B,UAAU;IAAlCG,OAAO,GAAAD,WAAA;IAAEE,WAAW,GAAAF,WAAA;;EAE3B;EACA;EACA;EACA;;EAEA,IAAMG,SAAS,GAAGD,WAAW,CAACE,MAAM;EACpC,IAAMC,SAAS,GAAGH,WAAW,CAACI,GAAG;;EAEjC;EACA,IAAIC,IAAI,GAAG,IAAI9C,KAAK,CAAC4C,SAAS,CAAC;EAC/B,IAAIxC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGwC,SAAS,EAAE;IACpBE,IAAI,CAAC1C,CAAC,CAAC,GAAG,IAAIJ,KAAK,CAAC0C,SAAS,CAAC;IAC9B,IAAIK,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGL,SAAS,EAAE;MACpBI,IAAI,CAAC1C,CAAC,CAAC,CAAC2C,CAAC,CAAC,GAAG,IAAI;MACjBA,CAAC,EAAE;IACL;IACA3C,CAAC,EAAE;EACL;;EAEA;EACA;EACA;EACA;EACA,SAAA4C,SAAA,GAAAzD,+BAAA,CAAmB+C,KAAK,GAAAW,KAAA,IAAAA,KAAA,GAAAD,SAAA,IAAA3C,IAAA,GAAE;IAAA,IAAf6C,IAAI,GAAAD,KAAA,CAAA3C,KAAA;IACb;IACA;IACA;IACA;IACA,IAAM6C,QAAQ,GAAGD,IAAI,CAACL,GAAG,GAAG,CAAC;IAC7B,IAAMO,WAAW,GAAGF,IAAI,CAACP,MAAM,GAAG,CAAC;IACnC;IACA,IAAIS,WAAW,GAAGV,SAAS,IAAIS,QAAQ,GAAGP,SAAS,EAAE;MACnDE,IAAI,CAACK,QAAQ,CAAC,CAACC,WAAW,CAAC,GAAGF,IAAI,CAAC5C,KAAK;IAC1C;EACF;;EAEA;EACA,IAAgB+C,WAAW,GAAKjB,OAAO,CAA/BkB,MAAM;EACd,IAAID,WAAW,EAAE;IACf,IAAIjD,EAAC,GAAG,CAAC;IACT,OAAOA,EAAC,GAAG0C,IAAI,CAAC3C,MAAM,EAAE;MACtBkD,WAAW,CAACjD,EAAC,CAAC,GAAGA,EAAC;MAClBA,EAAC,EAAE;IACL;EACF;;EAEA;EACA0C,IAAI,GAAG,IAAAS,yBAAa,EAClB,IAAAC,4BAAgB,EAACV,IAAI,EAAE;IAAEW,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAClD;IAAEA,gBAAgB,EAAE,IAAI;IAAEJ,WAAW,EAAXA;EAAY,CACxC,CAAC;;EAED;EACA,IAAIjB,OAAO,CAACsB,aAAa,EAAE;IACzBZ,IAAI,GAAGV,OAAO,CAACsB,aAAa,CAACZ,IAAI,CAAC;IAClC;IACA;IACA;IACA;IACA;EACF;;EAEA,OAAOA,IAAI;AACb"}