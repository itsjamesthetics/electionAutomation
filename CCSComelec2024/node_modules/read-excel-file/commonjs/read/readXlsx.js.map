{"version":3,"file":"readXlsx.js","names":["_parseProperties","_interopRequireDefault","require","_parseFilePaths","_parseStyles","_parseSharedStrings","_parseSheet","_getData","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelperLoose","allowArrayLike","it","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","toString","slice","name","from","test","arr","len","arr2","ownKeys","e","r","t","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","key","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","readXlsx","contents","xml","options","sheet","getXmlFileContent","filePath","Error","concat","filePaths","parseFilePaths","values","sharedStrings","parseSharedStrings","styles","parseStyles","properties","parseProperties","getSheets","sheets","map","_ref","sheetId","getSheetId","createSheetNotFoundError","parseSheet","rowMap","data","getData","_sheet","relationId","_iterator","_step","sheetsList","join"],"sources":["../../source/read/readXlsx.js"],"sourcesContent":["import parseProperties from './parseProperties.js'\r\nimport parseFilePaths from './parseFilePaths.js'\r\nimport parseStyles from './parseStyles.js'\r\nimport parseSharedStrings from './parseSharedStrings.js'\r\nimport parseSheet from './parseSheet.js'\r\nimport getData from './getData.js'\r\n\r\n// For an introduction in reading `*.xlsx` files see \"The minimum viable XLSX reader\":\r\n// https://www.brendanlong.com/the-minimum-viable-xlsx-reader.html\r\n\r\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"mm/dd/yyyy\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\r\nexport default function readXlsx(contents, xml, options = {}) {\r\n  if (!options.sheet) {\r\n    options = {\r\n      sheet: 1,\r\n      ...options\r\n    }\r\n  }\r\n\r\n  const getXmlFileContent = (filePath) => {\r\n    if (!contents[filePath]) {\r\n      throw new Error(`\"${filePath}\" file not found inside the *.xlsx file zip archive`)\r\n    }\r\n    return contents[filePath]\r\n  }\r\n\r\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\r\n  // https://github.com/tidyverse/readxl/issues/104\r\n  const filePaths = parseFilePaths(getXmlFileContent('xl/_rels/workbook.xml.rels'), xml)\r\n\r\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\r\n  const values = filePaths.sharedStrings\r\n    ? parseSharedStrings(getXmlFileContent(filePaths.sharedStrings), xml)\r\n    : []\r\n\r\n  // Default file path for \"styles\": \"xl/styles.xml\".\r\n  const styles = filePaths.styles\r\n    ? parseStyles(getXmlFileContent(filePaths.styles), xml)\r\n    : {}\r\n\r\n  const properties = parseProperties(getXmlFileContent('xl/workbook.xml'), xml)\r\n\r\n  // A feature for getting the list of sheets in an Excel file.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/14\r\n  if (options.getSheets) {\r\n    return properties.sheets.map(({ name }) => ({\r\n      name\r\n    }))\r\n  }\r\n\r\n  // Find the sheet by name, or take the first one.\r\n  const sheetId = getSheetId(options.sheet, properties.sheets)\r\n\r\n  // If the sheet wasn't found then throw an error.\r\n  // Example: \"xl/worksheets/sheet1.xml\".\r\n  if (!sheetId || !filePaths.sheets[sheetId]) {\r\n    throw createSheetNotFoundError(options.sheet, properties.sheets)\r\n  }\r\n\r\n  // Parse sheet data.\r\n  const sheet = parseSheet(\r\n    getXmlFileContent(filePaths.sheets[sheetId]),\r\n    xml,\r\n    values,\r\n    styles,\r\n    properties,\r\n    options\r\n  )\r\n\r\n  options = {\r\n    // Create a `rowIndexMap` for the original dataset, if not passed,\r\n    // because \"empty\" rows will be dropped from the input data.\r\n    rowMap: [],\r\n    ...options\r\n  }\r\n\r\n  // Get spreadsheet data.\r\n  const data = getData(sheet, options)\r\n\r\n  // Can return properties, if required.\r\n  if (options.properties) {\r\n    return {\r\n      data,\r\n      properties\r\n    }\r\n  }\r\n\r\n  // Return spreadsheet data.\r\n  return data\r\n}\r\n\r\nfunction getSheetId(sheet, sheets) {\r\n  if (typeof sheet === 'number') {\r\n    const _sheet = sheets[sheet - 1]\r\n    return _sheet && _sheet.relationId\r\n  }\r\n  for (const _sheet of sheets) {\r\n    if (_sheet.name === sheet) {\r\n      return _sheet.relationId\r\n    }\r\n  }\r\n}\r\n\r\nfunction createSheetNotFoundError(sheet, sheets) {\r\n  const sheetsList = sheets && sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ')\r\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in the *.xlsx file.${sheets ? ' Available sheets: ' + sheetsList + '.' : ''}`)\r\n}"],"mappings":"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"}