{"version":3,"file":"parseCellValue.js","names":["_parseDate","_interopRequireDefault","require","_isDateTimestamp","obj","__esModule","parseCellValue","value","type","_ref","getInlineStringValue","getInlineStringXml","getStyleId","styles","values","properties","options","parseString","undefined","Error","concat","sharedStringIndex","Number","isNaN","length","decodeError","parsedDate","Date","valueOf","isDateTimestampNumber","isDateTimestamp","parseNumberDefault","parseDate","parseNumber","TypeError","errorCode","trim","stringifiedNumber","parsedNumber"],"sources":["../../source/read/parseCellValue.js"],"sourcesContent":["import parseDate from './parseDate.js'\r\nimport isDateTimestamp from './isDateTimestamp.js'\r\n\r\n// Parses a string `value` of a cell.\r\nexport default function parseCellValue(value, type, {\r\n  getInlineStringValue,\r\n  getInlineStringXml,\r\n  getStyleId,\r\n  styles,\r\n  values,\r\n  properties,\r\n  options\r\n}) {\r\n  if (!type) {\r\n    // Default cell type is \"n\" (numeric).\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    type = 'n'\r\n  }\r\n\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    // XLSX tends to store all strings as \"shared\" (indexed) ones\r\n    // using \"s\" cell type (for saving on strage space).\r\n    // \"str\" cell type is then generally only used for storing\r\n    // formula-pre-calculated cell values.\r\n    case 'str':\r\n      value = parseString(value, options)\r\n      break\r\n\r\n    // Sometimes, XLSX stores strings as \"inline\" strings rather than \"shared\" (indexed) ones.\r\n    // Perhaps the specification doesn't force it to use one or another.\r\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"inlineStr\"><is><t>Test 123</t></is></c></row></sheetData>`.\r\n    case 'inlineStr':\r\n      value = getInlineStringValue()\r\n      if (value === undefined) {\r\n        throw new Error(`Unsupported \"inline string\" cell value structure: ${getInlineStringXml()}`)\r\n      }\r\n      value = parseString(value, options)\r\n      break\r\n\r\n    // XLSX tends to store string values as \"shared\" (indexed) ones.\r\n    // \"Shared\" strings is a way for an Excel editor to reduce\r\n    // the file size by storing \"commonly used\" strings in a dictionary\r\n    // and then referring to such strings by their index in that dictionary.\r\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"s\"><v>0</v></c></row></sheetData>`.\r\n    case 's':\r\n      // If a cell has no value then there's no `<c/>` element for it.\r\n      // If a `<c/>` element exists then it's not empty.\r\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\r\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\r\n      const sharedStringIndex = Number(value)\r\n      if (isNaN(sharedStringIndex)) {\r\n        throw new Error(`Invalid \"shared\" string index: ${value}`)\r\n      }\r\n      if (sharedStringIndex >= values.length) {\r\n        throw new Error(`An out-of-bounds \"shared\" string index: ${value}`)\r\n      }\r\n      value = values[sharedStringIndex]\r\n      value = parseString(value, options)\r\n      break\r\n\r\n    // Boolean (TRUE/FALSE) values are stored as either \"1\" or \"0\"\r\n    // in cells of type \"b\".\r\n    case 'b':\r\n      if (value === '1') {\r\n        value = true\r\n      } else if (value === '0') {\r\n        value = false\r\n      } else {\r\n        throw new Error(`Unsupported \"boolean\" cell value: ${value}`)\r\n      }\r\n      break\r\n\r\n    // XLSX specification seems to support cells of type \"z\":\r\n    // blank \"stub\" cells that should be ignored by data processing utilities.\r\n    case 'z':\r\n      value = undefined\r\n      break\r\n\r\n    // XLSX specification also defines cells of type \"e\" containing a numeric \"error\" code.\r\n    // It's not clear what that means though.\r\n    // They also wrote: \"and `w` property stores its common name\".\r\n    // It's unclear what they meant by that.\r\n    case 'e':\r\n      value = decodeError(value)\r\n      break\r\n\r\n    // XLSX supports date cells of type \"d\", though seems like it (almost?) never\r\n    // uses it for storing dates, preferring \"n\" numeric timestamp cells instead.\r\n    // The value of a \"d\" cell is supposedly a string in \"ISO 8601\" format.\r\n    // I haven't seen an XLSX file having such cells.\r\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"d\"><v>2021-06-10T00:47:45.700Z</v></c></row></sheetData>`.\r\n    case 'd':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      const parsedDate = new Date(value)\r\n      if (isNaN(parsedDate.valueOf())) {\r\n        throw new Error(`Unsupported \"date\" cell value: ${value}`)\r\n      }\r\n      value = parsedDate\r\n      break\r\n\r\n    // Numeric cells have type \"n\".\r\n    case 'n':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      const isDateTimestampNumber = isDateTimestamp(getStyleId(), styles, options)\r\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\r\n      // Instead, it prefers using \"n\" type for storing dates as timestamps.\r\n      if (isDateTimestampNumber) {\r\n        // Parse the number from string.\r\n        value = parseNumberDefault(value)\r\n        // Parse the number as a date timestamp.\r\n        value = parseDate(value, properties)\r\n      } else {\r\n        // Parse the number from string.\r\n        // Supports custom parsing function to work around javascript number encoding precision issues.\r\n        // https://gitlab.com/catamphetamine/read-excel-file/-/issues/85\r\n        value = (options.parseNumber || parseNumberDefault)(value)\r\n      }\r\n      break\r\n\r\n    default:\r\n      throw new TypeError(`Cell type not supported: ${type}`)\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// Decodes numeric error code to a string code.\r\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\nfunction decodeError(errorCode) {\r\n  // While the error values are determined by the application,\r\n  // the following are some example error values that could be used:\r\n  switch (errorCode) {\r\n    case 0x00:\r\n      return '#NULL!'\r\n    case 0x07:\r\n      return '#DIV/0!'\r\n    case 0x0F:\r\n      return '#VALUE!'\r\n    case 0x17:\r\n      return '#REF!'\r\n    case 0x1D:\r\n      return '#NAME?'\r\n    case 0x24:\r\n      return '#NUM!'\r\n    case 0x2A:\r\n      return '#N/A'\r\n    case 0x2B:\r\n      return '#GETTING_DATA'\r\n    default:\r\n      // Such error code doesn't exist. I made it up.\r\n      return `#ERROR_${errorCode}`\r\n  }\r\n}\r\n\r\nfunction parseString(value, options) {\r\n  // In some weird cases, a developer might want to disable\r\n  // the automatic trimming of all strings.\r\n  // For example, leading spaces might express a tree-like hierarchy.\r\n  // https://github.com/catamphetamine/read-excel-file/pull/106#issuecomment-1136062917\r\n  if (options.trim !== false) {\r\n    value = value.trim()\r\n  }\r\n  if (value === '') {\r\n    value = undefined\r\n  }\r\n  return value\r\n}\r\n\r\n// Parses a number from string.\r\n// Throws an error if the number couldn't be parsed.\r\n// When parsing floating-point number, is affected by\r\n// the javascript number encoding precision issues:\r\n// https://www.youtube.com/watch?v=2gIxbTn7GSc\r\n// https://www.avioconsulting.com/blog/overcoming-javascript-numeric-precision-issues\r\nfunction parseNumberDefault(stringifiedNumber) {\r\n  const parsedNumber = Number(stringifiedNumber)\r\n  if (isNaN(parsedNumber)) {\r\n    throw new Error(`Invalid \"numeric\" cell value: ${stringifiedNumber}`)\r\n  }\r\n  return parsedNumber\r\n}"],"mappings":"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"}